/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SmsReceived extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SmsReceived\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"userId\",\"type\":\"long\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"contactHash\",\"type\":\"string\"},{\"name\":\"msgLength\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long id;
  @Deprecated public long userId;
  @Deprecated public long time;
  @Deprecated public java.lang.CharSequence contactHash;
  @Deprecated public int msgLength;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SmsReceived() {}

  /**
   * All-args constructor.
   */
  public SmsReceived(java.lang.Long id, java.lang.Long userId, java.lang.Long time, java.lang.CharSequence contactHash, java.lang.Integer msgLength) {
    this.id = id;
    this.userId = userId;
    this.time = time;
    this.contactHash = contactHash;
    this.msgLength = msgLength;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return userId;
    case 2: return time;
    case 3: return contactHash;
    case 4: return msgLength;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: userId = (java.lang.Long)value$; break;
    case 2: time = (java.lang.Long)value$; break;
    case 3: contactHash = (java.lang.CharSequence)value$; break;
    case 4: msgLength = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'userId' field.
   */
  public java.lang.Long getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'contactHash' field.
   */
  public java.lang.CharSequence getContactHash() {
    return contactHash;
  }

  /**
   * Sets the value of the 'contactHash' field.
   * @param value the value to set.
   */
  public void setContactHash(java.lang.CharSequence value) {
    this.contactHash = value;
  }

  /**
   * Gets the value of the 'msgLength' field.
   */
  public java.lang.Integer getMsgLength() {
    return msgLength;
  }

  /**
   * Sets the value of the 'msgLength' field.
   * @param value the value to set.
   */
  public void setMsgLength(java.lang.Integer value) {
    this.msgLength = value;
  }

  /** Creates a new SmsReceived RecordBuilder */
  public static SmsReceived.Builder newBuilder() {
    return new SmsReceived.Builder();
  }
  
  /** Creates a new SmsReceived RecordBuilder by copying an existing Builder */
  public static SmsReceived.Builder newBuilder(SmsReceived.Builder other) {
    return new SmsReceived.Builder(other);
  }
  
  /** Creates a new SmsReceived RecordBuilder by copying an existing SmsReceived instance */
  public static SmsReceived.Builder newBuilder(SmsReceived other) {
    return new SmsReceived.Builder(other);
  }
  
  /**
   * RecordBuilder for SmsReceived instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SmsReceived>
    implements org.apache.avro.data.RecordBuilder<SmsReceived> {

    private long id;
    private long userId;
    private long time;
    private java.lang.CharSequence contactHash;
    private int msgLength;

    /** Creates a new Builder */
    private Builder() {
      super(SmsReceived.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(SmsReceived.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contactHash)) {
        this.contactHash = data().deepCopy(fields()[3].schema(), other.contactHash);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.msgLength)) {
        this.msgLength = data().deepCopy(fields()[4].schema(), other.msgLength);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SmsReceived instance */
    private Builder(SmsReceived other) {
            super(SmsReceived.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contactHash)) {
        this.contactHash = data().deepCopy(fields()[3].schema(), other.contactHash);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.msgLength)) {
        this.msgLength = data().deepCopy(fields()[4].schema(), other.msgLength);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public SmsReceived.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public SmsReceived.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'userId' field */
    public java.lang.Long getUserId() {
      return userId;
    }
    
    /** Sets the value of the 'userId' field */
    public SmsReceived.Builder setUserId(long value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'userId' field has been set */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'userId' field */
    public SmsReceived.Builder clearUserId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'time' field */
    public java.lang.Long getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public SmsReceived.Builder setTime(long value) {
      validate(fields()[2], value);
      this.time = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'time' field */
    public SmsReceived.Builder clearTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'contactHash' field */
    public java.lang.CharSequence getContactHash() {
      return contactHash;
    }
    
    /** Sets the value of the 'contactHash' field */
    public SmsReceived.Builder setContactHash(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.contactHash = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'contactHash' field has been set */
    public boolean hasContactHash() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'contactHash' field */
    public SmsReceived.Builder clearContactHash() {
      contactHash = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'msgLength' field */
    public java.lang.Integer getMsgLength() {
      return msgLength;
    }
    
    /** Sets the value of the 'msgLength' field */
    public SmsReceived.Builder setMsgLength(int value) {
      validate(fields()[4], value);
      this.msgLength = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'msgLength' field has been set */
    public boolean hasMsgLength() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'msgLength' field */
    public SmsReceived.Builder clearMsgLength() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public SmsReceived build() {
      try {
        SmsReceived record = new SmsReceived();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.Long) defaultValue(fields()[1]);
        record.time = fieldSetFlags()[2] ? this.time : (java.lang.Long) defaultValue(fields()[2]);
        record.contactHash = fieldSetFlags()[3] ? this.contactHash : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.msgLength = fieldSetFlags()[4] ? this.msgLength : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
